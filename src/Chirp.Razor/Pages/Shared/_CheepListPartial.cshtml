@using Chirp.Core.Classes;
@using Chirp.Services.Interfaces;
@using Chirp.Core.DTO;
@using System.Text;
@using System.Security.Cryptography;
@model (List<CheepDTO> Cheeps, Range CheepRange, int PageNumber, int TotalPages, AuthorDTO? UserAuthor, List<AuthorDTO> FollowedAuthors)
@inject ICheepService CheepService
@{
    var nextPage = Model.PageNumber < Model.TotalPages ? Model.PageNumber + 1 : Model.TotalPages;
    var lastPage = Model.PageNumber > 1 ? Model.PageNumber - 1 : 1;
    var isFirstPage = Model.PageNumber == 1;
    var isLastPage = Model.PageNumber == Model.TotalPages;
}
@functions {
    public static string sha256_hash(string value)
    {
        using (SHA256 hash = SHA256.Create())
        {
            Encoding enc = Encoding.UTF8;
            Byte[] result = hash.ComputeHash(enc.GetBytes(value));

            var sb = new StringBuilder();
            foreach (Byte b in result)
                sb.Append(b.ToString("x2"));

            return sb.ToString();
        }
    }

    public static string timeSince(DateTime time)
    {
        TimeSpan span = DateTime.Now - time;
        if (span.TotalDays > 7)
        {
            return time.ToString("MMM d" + (time.Year != DateTime.Now.Year ? ", yyyy" : ""));
        }
        else if (span.TotalDays > 1)
        {
            return $"{(int)span.TotalDays} days ago";
        }
        else if (span.TotalHours > 1)
        {
            return $"{(int)span.TotalHours} hours ago";
        }
        else if (span.TotalMinutes > 1)
        {
            return $"{(int)span.TotalMinutes} minutes ago";
        }
        else
        {
            return "Just now";
        }
    }
}
<style>
    

.holder {
  --is-first-page:
      @isFirstPage
  ;
  --is-last-page:
      @isLastPage
  ;
}
</style>

@if (Model.Cheeps.Any())
{
    <ul id="messagelist" class="cheeps">
        @foreach (var cheep in Model.Cheeps)
        {
            <li>
                <div class="info">
                @if (cheep.Author.Email != null)
                {
                    <img class="icon" src="https://gravatar.com/avatar/@sha256_hash(cheep.Author.Email)" alt="Icon1" />
                } else{
                    <img class="icon" src="https://gravatar.com/avatar/?d=identicon" alt="Icon1" />
                }
                <div class="details">
                <strong>
                    <a href="/@cheep.Author.UserName">@cheep.Author.UserName</a>
                    <span
                    title="@cheep.TimeStamp.ToString("yyyy-MM-dd HH:mm:ss")"> · @timeSince(cheep.TimeStamp)</span>
                </strong>
                <p>
                    @cheep.Text
                </p>
                </div>
                </div>
                @if (cheep.Images != null && cheep.Images.Any())
                {
                    <div class="cheep-images" data-cheep-id="@cheep.CheepId">
                        @for (var i = 0; i < cheep.Images.Count; i++)
                        {
                            <div class="cheep-image-container" onclick="openImageModal('@cheep.CheepId', @i)">
                                <img src="@cheep.Images[i]" alt="Cheep image @(i + 1)" loading="lazy" />
                            </div>
                        }
                    </div>
                }
                @if (User.Identity != null)
                {
                    @if (User.Identity.IsAuthenticated && User.Identity.Name == cheep.Author.UserName)
                    {
                        <div class="cheep-actions">
                            <div class="dropdown">
                                <button class="dropdown-toggle" onclick="toggleDropdown(this)">⋯</button>
                                <div class="dropdown-menu">
                                    <form method="post" asp-page-handler="DeleteCheep">
                                        <input type="hidden" name="cheepId" value="@cheep.CheepId" />
                                        <input type="hidden" name="page" value="@Model.PageNumber" />
                                        <button type="submit">Delete Cheep</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                }
                <div class="comments-section">
                    <button class="comment-toggle" onclick="toggleComments(@cheep.CheepId)">Show Comments (@CheepService.GetCommentCountForCheep(cheep.CheepId))</button>
                    <div id="comments-@cheep.CheepId" class="comments-container" style="display: none;">
                        <div class="comments-list">
                            @foreach (var comment in CheepService.GetCommentsForCheep(cheep.CheepId))
                            {
                                <div class="comment">
                                    <div class="comment-header">
                                        <strong><a href="/@comment.Author.UserName">@comment.Author.UserName</a></strong>
                                        <span title="@comment.TimeStamp.ToString("yyyy-MM-dd HH:mm:ss")">
                                            · @timeSince(comment.TimeStamp)
                                        </span>
                                    </div>
                                    <p>@comment.Text</p>
                                    @if (User.Identity?.Name == comment.Author.UserName)
                                    {
                                        <form method="post" asp-page-handler="DeleteComment">
                                            <input type="hidden" name="commentId" value="@comment.CommentId" />
                                            <input type="hidden" name="page" value="@Model.PageNumber" />
                                            <button type="submit" class="delete-comment">Delete</button>
                                        </form>
                                    }
                                </div>
                            }
                        </div>
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <form method="post" asp-page-handler="AddComment" class="comment-form">
                                <input type="hidden" name="cheepId" value="@cheep.CheepId" />
                                <input type="text" name="commentText" maxlength="160" placeholder="Write a comment..." required />
                                <button type="submit">Comment</button>
                            </form>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
}
else
{
    <em>There are no cheeps so far.</em>
}

<div id="image-modal" class="image-modal">
    <button class="close-modal" onclick="closeModal()">&times;</button>
    <div class="modal-content">
        <img src="" alt="Full size image" id="modal-image" />
        <div class="modal-nav">
            <button id="prev-image" onclick="navigateImage(-1)">&lt;</button>
            <button id="next-image" onclick="navigateImage(1)">&gt;</button>
        </div>
        <div class="image-counter">
            <span id="current-image">1</span> / <span id="total-images">1</span>
        </div>
    </div>
</div>

<script>
    let currentCheepImages = [];
    let currentImageIndex = 0;

    function openImageModal(cheepId, imageIndex) {
        const cheepImagesDiv = document.querySelector(`.cheep-images[data-cheep-id="${cheepId}"]`);
        const images = Array.from(cheepImagesDiv.querySelectorAll('img')).map(img => img.src);
        
        currentCheepImages = images;
        currentImageIndex = imageIndex;
        updateModalImage();
        
        document.getElementById('image-modal').classList.add('active');
        document.body.style.overflow = 'hidden';
        
        updateNavigationButtons();
    }

    function closeModal() {
        document.getElementById('image-modal').classList.remove('active');
        document.body.style.overflow = '';
        currentCheepImages = [];
        currentImageIndex = 0;
    }

    function updateModalImage() {
        const modalImg = document.getElementById('modal-image');
        modalImg.src = currentCheepImages[currentImageIndex];
        
        document.getElementById('current-image').textContent = currentImageIndex + 1;
        document.getElementById('total-images').textContent = currentCheepImages.length;
    }

    function navigateImage(direction) {
        currentImageIndex = (currentImageIndex + direction + currentCheepImages.length) % currentCheepImages.length;
        updateModalImage();
        updateNavigationButtons();
    }

    function updateNavigationButtons() {
        const prevButton = document.getElementById('prev-image');
        const nextButton = document.getElementById('next-image');
        
        prevButton.style.display = currentCheepImages.length > 1 ? 'block' : 'none';
        nextButton.style.display = currentCheepImages.length > 1 ? 'block' : 'none';
    }

    document.getElementById('image-modal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
</script>
<script>
    function toggleDropdown(button) {
        event.preventDefault();
        const menu = button.nextElementSibling;
        menu.classList.toggle('show');
    }

    window.onclick = function(event) {
        if (!event.target.matches('.dropdown-toggle')) {
            const dropdowns = document.getElementsByClassName('dropdown-menu');
            for (const dropdown of dropdowns) {
                if (dropdown.classList.contains('show')) {
                    dropdown.classList.remove('show');
                }
            }
        }
    }

    function toggleComments(cheepId) {
        const commentsContainer = document.getElementById(`comments-${cheepId}`);
        const isHidden = commentsContainer.style.display === 'none';
        commentsContainer.style.display = isHidden ? 'block' : 'none';
        const commentCount = commentsContainer.querySelectorAll('.comment').length;
        event.target.textContent = isHidden ? `Hide Comments (${commentCount})` : `Show Comments (${commentCount})`;
        
        const pageKey = `comments-${cheepId}-page-${@Model.PageNumber}`;
        if (isHidden) {
            localStorage.setItem(pageKey, 'open');
        } else {
            localStorage.removeItem(pageKey);
        }
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        const cheepIds = @Html.Raw(Json.Serialize(Model.Cheeps.Select(c => c.CheepId)));
        const pageNumber = @Model.PageNumber;
        cheepIds.forEach(cheepId => {
            const pageKey = `comments-${cheepId}-page-${pageNumber}`;
            if (localStorage.getItem(pageKey) === 'open') {
                const commentsContainer = document.getElementById(`comments-${cheepId}`);
                if (commentsContainer) {
                    commentsContainer.style.display = 'block';
                    const commentCount = commentsContainer.querySelectorAll('.comment').length;
                    const toggleButton = document.querySelector(`button[onclick="toggleComments(${cheepId})"]`);
                    if (toggleButton) {
                        toggleButton.textContent = `Hide Comments (${commentCount})`;
                    }
                }
            }
        });
    });
</script>
<script>
    // This is to make sure the scroll position is saved for when the page refreshes
    window.addEventListener('beforeunload', function() {
        localStorage.setItem('scrollPosition', window.scrollY);
    });
    
    document.addEventListener('DOMContentLoaded', function() {
        const scrollPosition = localStorage.getItem('scrollPosition');
        if (scrollPosition !== null) {
            window.scrollTo(0, parseInt(scrollPosition, 10));
            localStorage.removeItem('scrollPosition');
        }
    });
</script>
<button id="back-to-top" class="template-button" onclick="scrollToTop()">↑ Back to Top</button>

<script>
    // Show or hide the "Back to Top" button based on the scroll position
    window.addEventListener('scroll', function () {
        const scrollTopButton = document.getElementById('back-to-top');
        if (window.scrollY > 300) { // Show when scrolled 300px or more
            scrollTopButton.style.display = 'block';
        } else {
            scrollTopButton.style.display = 'none';
        }
    });

    // Function to scroll to the top when the button is clicked
    function scrollToTop() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth' // Smooth scrolling
        });
    }
</script>

<style>
    /* Styling for the Back to Top Button */
    #back-to-top {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 10px 15px;
        font-size: 14px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        display: none; /* Hidden by default */
        z-index: 1000; /* Ensure it's above other elements */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    #back-to-top:hover {
        background-color: #0056b3;
    }
</style>